#!/bin/bash -

# This file performs an exhaustive full restore check
# on the MySQL backup dumps stored in the BACKUP_SERVERS.
# 
# Disclaimer: Takes a lot of awful fucking time.

export MYSQL_USER=root
export MYSQL_PASSWORD=root
export MYSQL_PORT=3307

export COMPOSE_FILE=$HOME/services/mysql-compose.yml

export BACKUP_SERVERS=(
  'monsoon-bcl-node10'
  'monsoon-bcl-node11'
  'sycamore-mnl-node0' 
  'sycamore-mnl-node4'
  'sycamore-mnl-node5' 
)

# This is temporarily declared as user 
# `ansible` is still not available.
export BACKUP_USERS=(
  'ho-db1-assistant'
  'ho-db2-assistant'
  's1-assistant'
  'w5-assistant'
  'db3-assistant' 
)

backup_date=`date '+%F'`

for index in ${!BACKUP_SERVERS[@]}; do
  next=$(($index + 1))

  server=${BACKUP_SERVERS[$index]}
  user=${BACKUP_USERS[$index]}

  uri="$user@$server"
  remote_dir="/var/backups/mysql/$backup_date"

  # Executes only when backup_dir exists.
  [ $(ssh $uri "test -d $remote_dir && echo 1") ] && { 
    local_dir="$HOME/.mysql_backup/${uri}"

    echo "Performing FRB check on ... $uri"

    # Create $local_dir if doesn't exist.
    [ ! -d $local_dir ] && mkdir -p $local_dir

    # Copy backup files from the server ~shesh.

    # Setup netcat to run in the background
    # nc -l -p 6543 | pv | tar xzf - -C $local_dir &
    # ssh $uri "tar czf - -C $remote_dir . | nc $(hostname -I) 6543"

    scp "$uri:$remote_dir/*" $local_dir

    wait

    # Restore all dumps to the tmp_mysql service.
    files=$(ls $local_dir)

    for dump in $files; do
      file_path="$local_dir/$dump"
      db_name="${dump%.*}"

      echo "Restoring ${BACKUP_SERVERS[$index]}:$dump..."

      # Create a database with the name of the dump file
      mysql \
        -u $MYSQL_USER \
        -P $MYSQL_PORT \
        -p$MYSQL_PASSWORD \
        -e "CREATE DATABASE IF NOT EXISTS $db_name;"

      # Restore the content of the dump to $db_name
      mysql -u $MYSQL_USER -P $MYSQL_PORT -p$MYSQL_PASSWORD -D $db_name < $file_path
    done
    
    if [[ -z "${BACKUP_SERVERS[$next]}" ]]; then
      break
    fi

    read -p "Continue FRB check on ${BACKUP_SERVERS[$next]}? [y/N]" prompt && [[ $prompt != [yY] ]] && break
  }
done

# Teardown the fuck everything up

